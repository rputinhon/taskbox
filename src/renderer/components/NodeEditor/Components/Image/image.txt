var imgSocket = new Rete.Socket('Image');

function loadImage(url) {
    return new Promise((resolve, reject) => {
      let img = new Image();
      img.addEventListener('load', e => resolve(img));
      img.addEventListener('error', () => {
        reject(new Error(`Failed to load image's URL: ${url}`));
      });
      img.src = url;
    });
}

class QuestionImageUrlControl extends Rete.Control {

    constructor(emitter, key, readonly) {
        super(key);
        this.emitter = emitter;
        this.key = key;
        this.template = `<div class="image-control"><img :src="url"/><input type="url" :readonly="readonly" :value="url" @input="change($event)" placeholder="Enter Image URL"/></div>`;

        this.scope = {
            url: null,
            readonly,
            change: this.change.bind(this)
        };
    }

    change(e) {
        this.scope.url = e.target.value;
        this.update();
    }

    update() {
        if (this.key)
            this.putData(this.key, this.scope.url)
        this.emitter.trigger('process');
        this._alight.scan();
    }

    mounted() {
        this.scope.url = this.getData(this.key);
        this.update();
    }

    setValue(url) {
        this.scope.url = url;
        this._alight.scan()
    }
}

class NumComponent extends Rete.Component {

    constructor(){
        super("Image URL");
    }

    builder(node) {
        var out1 = new Rete.Output('img', "Image", imgSocket);

        return node.addControl(new QuestionImageUrlControl(this.editor, 'url')).addOutput(out1);
    }

    async worker(node, inputs, outputs) {
        outputs['img'] = await loadImage(node.data.url);
        document.body.appendChild(outputs['img']) // TEST add image on page
    }
}


(async () => {
    var container = document.querySelector('#rete');
    var components = [new NumComponent()];
    
    var editor = new Rete.NodeEditor('demo@0.1.0', container);
    editor.use(ConnectionPlugin, { curvature: 0.4 });
    editor.use(AlightRenderPlugin);
    editor.use(ContextMenuPlugin);
    editor.use(AreaPlugin);

    var engine = new Rete.Engine('demo@0.1.0');
    
    components.map(c => {
        editor.register(c);
        engine.register(c);
    });

    var n1 = await components[0].createNode({url: 'https://avatars3.githubusercontent.com/u/39779957?s=200&v=4'});

    n1.position = [80, 200];
 

    editor.addNode(n1);

    editor.on('process nodecreated noderemoved connectioncreated connectionremoved', async () => {
        await engine.abort();
        await engine.process(editor.toJSON());
    });

    editor.view.resize();
    AreaPlugin.zoomAt(editor);
    editor.trigger('process');
})();

"rete": "1.4.5",
    "rete-alight-render-plugin": "0.1.5",
    "rete-area-plugin": "0.2.1",
    "rete-code-plugin": "0.2.0",
    "rete-comment-plugin": "0.7.0-rc.1",
    "rete-connection-mastery-plugin": "0.2.4",
    "rete-connection-plugin": "^0.9.0",
    "rete-context-menu-plugin": "0.6.0-rc.1",
    "rete-history-plugin": "0.2.2",
    "rete-module-plugin": "0.4.1",
    "rete-vue-render-plugin": "0.5.1",